// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tictactoe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TictactoeClient is the client API for Tictactoe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TictactoeClient interface {
	//   rpc CreateStream(Connect) returns (stream Message);
	//   rpc BroadcastMessage(Message) returns (Close);
	PlayStream(ctx context.Context, opts ...grpc.CallOption) (Tictactoe_PlayStreamClient, error)
}

type tictactoeClient struct {
	cc grpc.ClientConnInterface
}

func NewTictactoeClient(cc grpc.ClientConnInterface) TictactoeClient {
	return &tictactoeClient{cc}
}

func (c *tictactoeClient) PlayStream(ctx context.Context, opts ...grpc.CallOption) (Tictactoe_PlayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tictactoe_ServiceDesc.Streams[0], "/tictactoe.Tictactoe/PlayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tictactoePlayStreamClient{stream}
	return x, nil
}

type Tictactoe_PlayStreamClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type tictactoePlayStreamClient struct {
	grpc.ClientStream
}

func (x *tictactoePlayStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tictactoePlayStreamClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TictactoeServer is the server API for Tictactoe service.
// All implementations should embed UnimplementedTictactoeServer
// for forward compatibility
type TictactoeServer interface {
	//   rpc CreateStream(Connect) returns (stream Message);
	//   rpc BroadcastMessage(Message) returns (Close);
	PlayStream(Tictactoe_PlayStreamServer) error
}

// UnimplementedTictactoeServer should be embedded to have forward compatible implementations.
type UnimplementedTictactoeServer struct {
}

func (UnimplementedTictactoeServer) PlayStream(Tictactoe_PlayStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayStream not implemented")
}

// UnsafeTictactoeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TictactoeServer will
// result in compilation errors.
type UnsafeTictactoeServer interface {
	mustEmbedUnimplementedTictactoeServer()
}

func RegisterTictactoeServer(s grpc.ServiceRegistrar, srv TictactoeServer) {
	s.RegisterService(&Tictactoe_ServiceDesc, srv)
}

func _Tictactoe_PlayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TictactoeServer).PlayStream(&tictactoePlayStreamServer{stream})
}

type Tictactoe_PlayStreamServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type tictactoePlayStreamServer struct {
	grpc.ServerStream
}

func (x *tictactoePlayStreamServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tictactoePlayStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tictactoe_ServiceDesc is the grpc.ServiceDesc for Tictactoe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tictactoe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.Tictactoe",
	HandlerType: (*TictactoeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayStream",
			Handler:       _Tictactoe_PlayStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tictactoe.proto",
}
